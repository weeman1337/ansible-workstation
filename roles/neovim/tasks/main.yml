---
- name: stat neovim
  ansible.builtin.stat:
    path: /opt/neovim.appimage
    checksum_algorithm: sha256
  register: neovim_result

- name: be sure neovim is installed
  become: yes
  ansible.builtin.get_url:
    url: "https://github.com/neovim/neovim/releases/download/{{ neovim.version }}/nvim.appimage"
    dest: /opt/neovim.appimage
    checksum: "sha256:{{ neovim.checksum }}"
    mode: "777"
    force: yes
  when: neovim_result.stat.exists == False or neovim_result.stat.checksum != neovim.checksum

- name: be sure neovim is the default for vi
  become: yes
  ansible.builtin.alternatives:
    name: vi
    path: /opt/neovim.appimage

- name: be sure the nvim config directories exist
  ansible.builtin.file:
    path: "~/.config/nvim/{{ item }}"
    state: directory
    recurse: yes
  with_items:
    - lua/weeman/modules
    - vsnip

- name: be sure the nvim configs are linked
  ansible.builtin.file:
    src: "~/git/ansible-workstation/roles/neovim/files/config/{{ item }}"
    dest: "~/.config/nvim/{{ item }}"
    state: link
  with_items:
    - init.lua
    - lua/weeman/helpers.lua
    - lua/weeman/init.lua
    - lua/weeman/plugins.lua
    - lua/weeman/preview.lua
    - lua/weeman/project.lua
    - lua/weeman/scratches.lua
    - lua/weeman/settings.lua
    - lua/weeman/statusline.lua
    - vsnip/json.json
    - vsnip/matrix_licence.json
    - projects

- name: be sure the modules file exists (start)
  ansible.builtin.lineinfile:
    path: ~/.config/nvim/lua/weeman/modules.lua
    regexp: "^return \\{"
    line: "return {"
    insertbefore: BOF
    create: yes

- name: be sure the modules file exists (end)
  ansible.builtin.lineinfile:
    path: ~/.config/nvim/lua/weeman/modules.lua
    regexp: "^\\}"
    line: "}"
    insertafter: EOF

- name: be sure packages are installed
  become: yes
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 86400
    name:
      - xclip

- name: be sure pynvim is installed
  ansible.builtin.pip:
    name:
    - pynvim
    extra_args: "--user"

- name: be sure the python language server is installed
  community.general.pipx:
    name: python-lsp-server

- name: be sure the ansible-lint is installed
  community.general.pipx:
    name: ansible-lint

- name: be sure the python language server extras are installed
  community.general.pipx:
    name: python-lsp-server
    state: inject
    inject_packages:
      - python-lsp-server[flake8]
      - python-lsp-server[rope]
      - python-lsp-server[yapf]

- name: check the installed lua language server version
  command: "grep -xq '## {{ lua_dev.lua_language_server.version }}' ~/opt/lua-language-server/changelog.md"
  register: lua_language_server_version_result
  check_mode: no
  ignore_errors: yes
  changed_when: no

- name: be sure the lua language server archive is downloaded
  get_url:
    url: "https://github.com/sumneko/lua-language-server/releases/download/{{ lua_dev.lua_language_server.version }}/lua-language-server-{{ lua_dev.lua_language_server.version }}-linux-x64.tar.gz"
    dest: "/tmp/lua-language-server-{{ lua_dev.lua_language_server.version }}-linux-x64.tar.gz"
    checksum: "sha256:{{ lua_dev.lua_language_server.checksum }}"
  when: lua_language_server_version_result.rc != 0

- name: clean the lua language server target path
  file:
    path: ~/opt/lua-language-server
    state: absent
  when: lua_language_server_version_result.rc != 0

- name: be sure ~/opt/lua-language-server exists
  file:
    path: ~/opt/lua-language-server
    state: directory
  when: lua_language_server_version_result.rc != 0

- name: extract the lua language server archive
  unarchive:
    src: "/tmp/lua-language-server-{{ lua_dev.lua_language_server.version }}-linux-x64.tar.gz"
    dest: ~/opt/lua-language-server
    remote_src: yes
  when: lua_language_server_version_result.rc != 0

- name: be sure the lua language server bin is linked
  file:
    src: ~/opt/lua-language-server/bin/lua-language-server
    dest: ~/.local/bin/lua-language-server
    state: link

- name: be sure the json schemas are linked
  file:
    src: ~/git/ansible-workstation/roles/neovim/files/json_schemas
    dest: ~/.local/share/json_schemas
    state: link

- name: be sure npm packages are installed
  npm:
    name: "{{ item.key }}"
    version: "{{ item.value }}"
    global: yes
  with_dict:
    "@ansible/ansible-language-server": "{{ ansible_language_server.version }}"
    dockerfile-language-server-nodejs: "{{ dockerfile_language_server.version }}"
    vscode-langservers-extracted: "{{ vscode_language_servers.version }}"
